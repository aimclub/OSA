{
    "unoconv/setup.py": [
        {
            "details": {
                "docstring": null,
                "method_name": "adoc2rst",
                "second_doc": "\"\"\"\nConverts a text formatted in AsciiDoc style to reStructuredText (reST) format for compatibility with different documentation systems. This transformation addresses header styles, bullet lists, code blocks, and indentation differences between the two markup formats to ensure accurate content rendering after conversion.\n\nArgs:\n    text (str): The input text written in AsciiDoc markup to be converted.\n\nReturns:\n    str: The converted text in reStructuredText format.\n\"\"\"",
                "source_code": "levels = '=-~.^'\n    lines = text.split('\\n')\n    # Flags:\n    codeblock = 0\n    bullet = ''\n    indent = 0\n\n    result = []\n    for line in lines:\n        # Get rid of extra whitespace\n        line = line.rstrip()\n        new_indent = len(line) - len(line.strip())\n\n        if not line.strip():\n            if not result or result[-1].strip():\n                result.append(line)\n            continue\n        elif line[0] == '=':\n            # This is a header\n            header = line.rstrip('=')\n            level = len(line) - len(header)\n            header = header.strip('= ')\n            result.append(header)\n            result.append(levels[level] * len(header))\n            result.append('')\n            indent = 0\n            codeblock = 0\n            continue\n        elif line == '----':\n            # Code block\n\n            if codeblock == 0:\n                codeblock = 1\n                result.append('.. code-block::')\n                result.append('')\n            elif codeblock == 1:\n                # End of code\n                codeblock = 0\n            elif codeblock == 2:\n                # We have a '----' codeblock after a '::' codeblock:\n                codeblock = 1\n\n            continue\n        elif line.strip()[0] in '-*+':\n            # Bullet list\n            # It's NOT code, even if the line before ended in colon\n            if codeblock == 2:\n                codeblock = 0\n                for x in (-1, -2):\n                    if result[x].endswith(':'):\n                        result[x] = result[x][:-1]\n\n            new_bullet = line.strip()[0]\n            if not bullet or bullet[-1] != new_bullet:\n                # New list\n                bullet = bullet + new_bullet\n        elif new_indent < indent:\n            # Outdent (but not a bullet)\n            if bullet:\n                if bullet != line.strip()[0]:\n                    bullet = bullet[:-1]\n                    # Bullets must end with a blank line:\n                    result.append('')\n                indent = new_indent\n            if new_indent == 0:\n                codeblock = 0\n\n        if new_indent > indent:\n            indent = new_indent\n\n        if codeblock:\n            line = '    ' + line\n\n        if line and line[-1] == ':':\n            line += ':'\n            codeblock = 2 # Type 2 codeblock\n\n        result.append(line)\n\n    return '\\n'.join(result)"
            },
            "type": "function"
        }
    ]
}